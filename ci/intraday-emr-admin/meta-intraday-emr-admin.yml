meta-intraday-emr-admin:
  plan:
    start-cluster:
      task: start-cluster
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set +x

              jq -n '{
                 "s3_overrides": null,
                 "overrides": {"Instances": {"KeepJobFlowAliveWhenNoSteps": true}, "Steps": []},
                 "extend": null,
                 "additional_step_args": null,
               }' > payload.json

              cat payload.json
              aws lambda invoke --function-name intraday-emr-launcher --invocation-type RequestResponse --payload file://payload.json --cli-connect-timeout 600 --cli-read-timeout 600 output.json

    trigger-cluster:
      task: trigger-cluster
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set +x
              aws lambda invoke --function-name "intraday_cron_launcher" --invocation-type RequestResponse output.json

    stop-cluster:
      task: stop-cluster
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set +x
              if [ -z "$CLUSTER_ID" ]; then
                echo "Terminating all clusters"
                for CLUSTER_ID in $(aws emr list-clusters --active | jq -r '.Clusters[] | select(.Name | startswith("intraday-incremental")).Id');
                do
                  echo "Terminating cluster $CLUSTER_ID"
                  aws emr terminate-clusters --cluster-ids "$CLUSTER_ID"
                done
              else
                echo "Terminating single cluster: $CLUSTER_ID"
                aws emr terminate-clusters --cluster-ids "$CLUSTER_ID"
              fi
    remove-metadata:
      task: remove-metadata
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set +x

              export topic_arn=arn:aws:sns:${AWS_DEFAULT_REGION}:${AWS_ACC}:intraday-emr-terminated
              export message_json=$(cat <<EOF
              {
                "detail": {
                  "name": "intraday-incremental",
                  "clusterId": "$CLUSTER_ID"
                }
              }
              EOF
              )

              echo $message_json
              aws sns publish --topic-arn "$topic_arn" --message "$message_json"
