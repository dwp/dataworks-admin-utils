meta-ap-dev-emr-admin:
  plan:
    start-cluster:
      task: start-cluster
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set +x

              jq -n '{
                 "additional_step_args": {
                      "get-scripts":[
                                    "--correlation_id", "test",
                                    "--s3_prefix", "test",
                                    "--snapshot_type", "incremental",
                                    "--export_date", "test"
              ]
                },
               }' > payload.json

              cat payload.json
              aws lambda invoke --function-name ap_emr_launcher --invocation-type RequestResponse --payload file://payload.json --cli-connect-timeout 600 --cli-read-timeout 600 output.json


    terraform-output-common-infrastructure:
      task: terraform-output-common-infrastructure
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        run:
          path: sh
          args:
            - -exc
            - |
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output-common-infrastructure/outputs.json
          dir: aws-common-infrastructure
        inputs:
          - name: aws-common-infrastructure
        outputs:
          - name: terraform-output-common-infrastructure


    stop-cluster:
      task: stop-cluster
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set +x

              CLUSTER=$(aws emr list-clusters --active | jq -r '.Clusters[] | select(.Name | test("datsci-model-build")) | .Id')
              echo $CLUSTER
              for CLUSTER_ID in $(aws emr list-clusters --active | jq -r '.Clusters[] | select(.Name | test("datsci-model-build")) | .Id');
              do
                aws emr terminate-clusters --cluster-ids $CLUSTER_ID
              done

    download-packages:
      task: download-packages
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.management)):role/ci
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set +x

              S3_CONFIG_BUCKET=$(cat terraform-output-common-infrastructure/outputs.json | jq -r '.config_bucket.value.id')
              echo $S3_BUCKET
              curl -L --output /tmp/en_core_web_sm-3.4.0.tar.gz https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.4.0/en_core_web_sm-3.4.0.tar.gz
              curl -L --output /tmp/en_core_web_lg-3.4.0.tar.gz https://github.com/explosion/spacy-models/releases/download/en_core_web_lg-3.4.0/en_core_web_lg-3.4.0.tar.gz
              curl -L --output /tmp/en_core_web_trf-3.4.0.tar.gz https://github.com/explosion/spacy-models/releases/download/en_core_web_trf-3.4.0/en_core_web_trf-3.4.0.tar.gz

              ls /tmp/

              aws s3 cp /tmp/en_core_web_sm-3.4.0.tar.gz s3://$S3_CONFIG_BUCKET/component/datsci-model-build/
              aws s3 cp /tmp/en_core_web_lg-3.4.0.tar.gz s3://$S3_CONFIG_BUCKET/component/datsci-model-build/
              aws s3 cp /tmp/en_core_web_trf-3.4.0.tar.gz s3://$S3_CONFIG_BUCKET/component/datsci-model-build/
        inputs:
          - name: terraform-output-common-infrastructure

    stop-waiting-cluster:
      task: stop-waiting-cluster
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.management)):role/ci
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set +x

              for CLUSTER_ID in `aws emr list-clusters --cluster-state WAITING | jq -r '.Clusters[].Id'`
              do
                  echo "Checking cluster $CLUSTER_ID"
                  # Is it an analytical cluster (should probably tag type of analytical-env ).
                  APPNAME=`aws emr describe-cluster --cluster-id $CLUSTER_ID | jq -r ".Cluster.Tags[] | if .Key == \"Application\" then .Value else empty end"`
                  CLEVEL=`aws emr describe-cluster --cluster-id $CLUSTER_ID | jq -r ".Cluster.StepConcurrencyLevel"`
                  if [[ ${APPNAME:-""} == "datsci-model-build" ]]
                  then
                      echo $CLUSTER_ID is an analytical env cluster
                      # Currently the only way to know if its a batch cluster is to check if its concurrency is 256
                      if [[ $CLEVEL -eq 256 ]]
                      then
                          echo $CLUSTER_ID is a batch cluster
                          END_DATE=`aws emr list-steps --cluster-id $CLUSTER_ID | jq '.Steps[0].Status.Timeline.EndDateTime | floor'`
                          let DELTA="`date +%s` - $END_DATE"
                          if [[ $DELTA -gt 3600 ]]
                          then
                              echo Stopping cluster $CLUSTER_ID with a delta of $DELTA
                              aws emr terminate-clusters --cluster-ids $CLUSTER_ID
                          fi
                      fi
                  fi
              done
