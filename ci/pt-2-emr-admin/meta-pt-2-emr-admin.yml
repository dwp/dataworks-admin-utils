meta-pt-2-emr-admin:
  plan:
    start-cluster:
      task: start-cluster
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          EMR_LAUNCH_LAMBDA: "aws_analytical_env_emr_launcher"
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set +x

              add_step_to_cluster() {
                echo "Adding step to cluster with id of $ACTIVE_CLUSTER_ID"
                STEP_ID=$(aws emr add-steps --cluster-id "$ACTIVE_CLUSTER_ID" --steps Type=CUSTOM_JAR,Name=pt-2,Jar=s3://eu-west-2.elasticmapreduce/libs/script-runner/script-runner.jar,Args=/opt/emr/repos/aws-payment-timelines/scripts/build_pt.sh,uc_payment_timelines,2 | jq -r '.StepIds[0]')
                echo "Added step with id of $STEP_ID"
              }

              set_cluster_id() {
                for cluster_id in $(aws emr list-clusters --cluster-states STARTING BOOTSTRAPPING RUNNING WAITING | jq -r '.Clusters[] | select(.Name | test("external-batch-analytical-env")) | .Id');
                do
                  export ACTIVE_CLUSTER_ID="$cluster_id"
                  break
                done
              }

              start_cluster() {
                message_json=$(cat <<EOF
                {
                  "overrides": {
                    "Name": "external-batch-analytical-env"
                  },
                  "s3_overrides": {
                    "emr_launcher_config_s3_folder": "emr/payment-timelines-cluster-config"
                  }
                }
              EOF
                )
                echo "$message_json"

                aws lambda invoke --function-name "$EMR_LAUNCH_LAMBDA" --payload "$message_json" response.json
              }

              echo "Checking for existing cluster"
              set_cluster_id

              if [ -n "$ACTIVE_CLUSTER_ID" ]; then
                add_step_to_cluster
                exit 0
              fi

              echo "No active cluster, so calling lambda to start one"
              start_cluster

              while true; do
                echo "Waiting for cluster to start"
                set_cluster_id
                if [ -n "$ACTIVE_CLUSTER_ID" ]; then
                  add_step_to_cluster
                  break
                fi
                sleep 10
              done

    stop-cluster:
      task: stop-cluster
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set +x

              for CLUSTER_ID in $(aws emr list-clusters --active | jq -r '.Clusters[] | select(.Name | test("external-batch-analytical-env")) | .Id');
              do
              aws emr terminate-clusters --cluster-ids $CLUSTER_ID
              done

    clear-dynamodb-row:
      task: clear-dynamodb-row
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set +x

              message_json=$(cat <<EOF
              {
                "Correlation_Id": {"S": "$CORRELATION_ID"},
                "DataProduct": {"S": "$DATA_PRODUCT"}
              }
              EOF
              )
              echo $message_json

              aws dynamodb delete-item \
              --table-name data_pipeline_metadata \
              --key "$message_json"
