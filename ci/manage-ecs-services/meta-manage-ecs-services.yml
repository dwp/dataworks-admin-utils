meta-manage-ecs-services:
  plan:
    manage-ecs-common:
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          ECS_CLUSTER: unset
          ECS_SERVICE: unset

    restart-ecs-service:
      task: restart-ecs-service
      .: (( inject meta-manage-ecs-services.plan.manage-ecs-common ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x
              TASK_ARNS=$(aws --region=eu-west-2 ecs list-tasks --cluster ${ECS_CLUSTER} --service-name ${ECS_SERVICE} --query 'taskArns' --output text)
              set -- junk $TASK_ARNS
              shift
              for TASK_ARN; do
                aws --region=eu-west-2 ecs stop-task --cluster ${ECS_CLUSTER} --task ${TASK_ARN};
              done

    scale-down-ecs-service:
      task: scale-down-ecs-service
      .: (( inject meta-manage-ecs-services.plan.manage-ecs-common ))
      config:
        params:
          DESIRED_COUNT: 0
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x
              aws --region=eu-west-2 ecs update-service --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE} --desired-count ${DESIRED_COUNT}

    scale-up-ecs-service:
      task: scale-up-ecs-service
      .: (( inject meta-manage-ecs-services.plan.manage-ecs-common ))
      config:
        params:
          DESIRED_COUNT_OUTPUT_NAME: ".kafka_to_hbase_consumer.value[0].desired_count"
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x
              DESIRED_COUNT=$(cat terraform-output-ingest/outputs.json | jq -r "$DESIRED_COUNT_OUTPUT_NAME")
              aws --region=eu-west-2 ecs update-service --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE} --desired-count ${DESIRED_COUNT}
        inputs:
          - name: terraform-output-ingest
          
    restart-ucfs-reconciliation:
      .: (( inject meta-manage-ecs-services.plan.restart-ecs-service ))
      config:
        params:
          ECS_CLUSTER: main
          ECS_SERVICE: ucfs-reconciliation

    restart-equality-reconciliation:
      .: (( inject meta-manage-ecs-services.plan.restart-ecs-service ))
      config:
        params:
          ECS_CLUSTER: main
          ECS_SERVICE: equality-reconciliation

    restart-ucfs-trim-reconciled-records:
      .: (( inject meta-manage-ecs-services.plan.restart-ecs-service ))
      config:
        params:
          ECS_CLUSTER: main
          ECS_SERVICE: ucfs-trim-reconciled-records

    restart-equality-trim-reconciled-records:
      .: (( inject meta-manage-ecs-services.plan.restart-ecs-service ))
      config:
        params:
          ECS_CLUSTER: main
          ECS_SERVICE: equality-trim-reconciled-records

    scale-down-ucfs-reconciliation:
      .: (( inject meta-manage-ecs-services.plan.scale-down-ecs-service ))
      config:
        params:
          ECS_CLUSTER: main
          ECS_SERVICE: ucfs-reconciliation

    scale-down-equality-reconciliation:
      .: (( inject meta-manage-ecs-services.plan.scale-down-ecs-service ))
      config:
        params:
          ECS_CLUSTER: main
          ECS_SERVICE: equality-reconciliation


    scale-down-ucfs-trim-reconciled-records:
      .: (( inject meta-manage-ecs-services.plan.scale-down-ecs-service ))
      config:
        params:
          ECS_CLUSTER: main
          ECS_SERVICE: ucfs-trim-reconciled-records

    scale-down-equality-trim-reconciled-records:
      .: (( inject meta-manage-ecs-services.plan.scale-down-ecs-service ))
      config:
        params:
          ECS_CLUSTER: main
          ECS_SERVICE: equality-trim-reconciled-records

    scale-up-ucfs-reconciliation:
      .: (( inject meta-manage-ecs-services.plan.scale-up-ecs-service ))
      config:
        params:
          ECS_CLUSTER: main
          ECS_SERVICE: ucfs-reconciliation
          DESIRED_COUNT_OUTPUT_NAME: ".k2hb_reconciliation.value.task_counts.ucfs_reconciliation"

    scale-up-equality-reconciliation:
      .: (( inject meta-manage-ecs-services.plan.scale-up-ecs-service ))
      config:
        params:
          ECS_CLUSTER: main
          ECS_SERVICE: equality-reconciliation
          DESIRED_COUNT_OUTPUT_NAME: ".k2hb_reconciliation.value.task_counts.equality_reconciliation"

    scale-up-ucfs-trim-reconciled-records:
      .: (( inject meta-manage-ecs-services.plan.scale-up-ecs-service ))
      config:
        params:
          ECS_CLUSTER: main
          ECS_SERVICE: ucfs-trim-reconciled-records
          DESIRED_COUNT_OUTPUT_NAME: ".k2hb_reconciliation.value.task_counts.ucfs_trim_reconciled_records"

    scale-up-equality-trim-reconciled-records:
      .: (( inject meta-manage-ecs-services.plan.scale-up-ecs-service ))
      config:
        params:
          ECS_CLUSTER: main
          ECS_SERVICE: equality-trim-reconciled-records
          DESIRED_COUNT_OUTPUT_NAME: ".k2hb_trim_reconciled_records.value.task_counts.equality_trim_reconciled_records"
