meta-hbase-data-ingestion:
  plan:
    run-data-import:
      task: run-data-import
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_python_boto_behave_repository))
            tag: 0.0.26
        params:
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          E2E_TEST_TIMEOUT: 300
        run:
          dir: dataworks-behavioural-framework
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x
              export E2E_FEATURE_TAG_FILTER="${ACTION_TAG}"

              cd src/runners
              ./run-ci.sh \
              "../../../meta"
        inputs:
          - name: dataworks-behavioural-framework
          - name: meta

    run-data-load:
      task: run-data-load
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_python_boto_behave_repository))
            tag: ((dataworks.docker_python_boto_behave_version))
        params:
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          E2E_TEST_TIMEOUT: 300
          ASSUME_DURATION: 43200
        run:
          dir: dataworks-behavioural-framework
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x
              export E2E_FEATURE_TAG_FILTER="${ACTION_TAG}"
              export DATA_LOAD_TOPICS="${DATA_LOAD_TOPICS}"
              export DATA_LOAD_METADATA_STORE_TABLE="${DATA_LOAD_METADATA_STORE_TABLE}"
              export CORPORATE_DATA_INGESTION_SKIP_EARLIER_THAN_OVERRIDE="${CORPORATE_DATA_INGESTION_SKIP_EARLIER_THAN_OVERRIDE}"
              export CORPORATE_DATA_INGESTION_SKIP_LATER_THAN_OVERRIDE="${CORPORATE_DATA_INGESTION_SKIP_LATER_THAN_OVERRIDE}"

              if [[ "${ACTION_TAG}" == "@admin-corporate-data-load" ]]; then
                echo "Setting CDL properties"
                if [[ "${DATA_LOAD_METADATA_STORE_TABLE}" == "equalities" ]]; then
                  echo "Setting equalities table values"
                  export DATA_LOAD_S3_BASE_PREFIX=$(cat ../terraform-output-ingest/outputs.json | jq -r '.corporate_data_loader.value.s3_base_prefix_equalities')
                  export DATA_LOAD_S3_FILE_PATTERN=$(cat ../terraform-output-ingest/outputs.json | jq -r '.corporate_data_loader.value.file_pattern_equalities')
                elif [[ "${DATA_LOAD_METADATA_STORE_TABLE}" == "audit" ]]; then
                  echo "Setting audit table values"
                  export DATA_LOAD_S3_BASE_PREFIX=$(cat ../terraform-output-ingest/outputs.json | jq -r '.corporate_data_loader.value.s3_base_prefix_audit')
                  export DATA_LOAD_S3_FILE_PATTERN=$(cat ../terraform-output-ingest/outputs.json | jq -r '.corporate_data_loader.value.file_pattern_audit')
                else
                  echo "Setting default values"
                  export DATA_LOAD_S3_BASE_PREFIX=$(cat ../terraform-output-ingest/outputs.json | jq -r '.corporate_data_loader.value.s3_base_prefix_ucfs')
                  export DATA_LOAD_S3_FILE_PATTERN=$(cat ../terraform-output-ingest/outputs.json | jq -r '.corporate_data_loader.value.file_pattern_ucfs')
                fi
                echo "Set DATA_LOAD_S3_BASE_PREFIX to '${DATA_LOAD_S3_BASE_PREFIX}' and DATA_LOAD_S3_FILE_PATTERN to '${DATA_LOAD_S3_FILE_PATTERN}'"
              else
                echo "Not setting CDL properties as ACTION_TAG is set to '${ACTION_TAG}'"
              fi

              if [[ ! -z "${DATA_LOAD_S3_SUFFIX}" ]]; then
                export DATA_LOAD_S3_BASE_PREFIX="${DATA_LOAD_S3_BASE_PREFIX}/${DATA_LOAD_S3_SUFFIX}"
              fi

              cd src/runners
              ./run-ci.sh \
              "../../../meta"
        inputs:
          - name: dataworks-behavioural-framework
          - name: meta

    clear-manifest:
      task: clear-manifest
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          ASSUME_DURATION: 14400
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x
              S3_MANIFEST_BUCKET=$(cat terraform-output-internal-compute/outputs.json | jq -r '.manifest_bucket.value.id')
              S3_MANIFEST_PREFIX=$(cat terraform-output-internal-compute/outputs.json | jq -r '.manifest_s3_prefixes.value.historic')

              S3_LOCATION="s3://${S3_MANIFEST_BUCKET}/${S3_MANIFEST_PREFIX}/" 
              TIMEOUT=120

              aws s3 rm "${S3_LOCATION}" --recursive

              TIME_TAKEN=10
              while true; do
                  if [[ ${TIME_TAKEN} > ${TIMEOUT} ]]; then
                      break
                  fi

                  if [[ -z $(aws s3 ls "${S3_LOCATION}") ]]; then
                      break
                  fi

                  TIME_TAKEN=$((TIME_TAKEN + 1))
                  sleep 1
              done
        inputs:
          - name: terraform-output-internal-compute

    terraform-output-internal-compute:
      task: terraform-output-internal-compute
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        run:
          path: sh
          args:
            - -exc
            - |
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output-internal-compute/outputs.json
          dir: aws-internal-compute
        inputs:
          - name: aws-internal-compute
        outputs:
          - name: terraform-output-internal-compute
